toplevel_methods:
  -
    name: "dat.createArchive()"
    signature: "dat.createArchive(opts?: Object): Promise&lt;string&gt;"
    experimental: true
    desc: |
      Create a new dat archive, and return the URL.
      The archive is sandboxed to only access to files within it.

      - opts.title. String. The title of the new archive.
      - opts.description. String. The description of the new archive.
  -
    name: "dat.deleteArchive()"
    signature: "dat.deleteArchive(url: string): void"
    experimental: true
    desc: |
      Mark the given archive for deletion.
      The archive will not be deleted immediately, but put into the cache system where it can be cleaned.
  -
    name: "dat.stat()"
    signature: "dat.stat(url: string, opts?: Object): Promise&lt;Object&gt;"
    experimental: true
    desc: |
      Fetches information about the file or directory at 'path'.
      The promise will reject if no file or directory is found.

      - url. The URL of the file/directory to stat. This must be a dat:// URL.
      - opts.version. String. Which version of the file to read? Refers to the name of a checkpoint. If unspecified, defaults to latest.
      - opts.downloadedBlocks. Boolean. Count how many blocks are downloaded? Causes the `downloadedBlocks` attribute to be populated. Default false.
      - opts.timeout. Number. How long, in ms, to wait for a response? Default 5000. 

      Return object:

      ```text
      {
        type: string ('file' or 'directory'),
        name: string (the full path),
        size: number (bytes),
        blocks: number (blocks),
        downloadedBlocks: number (blocks, optional),
        mtime: number (timestamp) the last modification time
      }
      ```

      If the archive is not found on the network, or in the local cache, this call will timeout.
  -
    name: "dat.readFile()"
    signature: |
      dat.readFile(url: string, opts?: String|Object):
        Promise&lt;string|ArrayBuffer&gt;
    experimental: true
    desc: |
      Reads the file's contents.

      - url. The URL of the file to read. This must be a dat:// URL.
      - opts.version. String. Which version of the file to read? Refers to the name of a checkpoint. If unspecified, defaults to latest.
      - opts.encoding
        - 'utf8' / 'utf-8' (default). Return value will be a string.
        - 'base64'. Return value will be a string.
        - 'hex'. Return value will be a string.
        - 'binary'. Return value will be an ArrayBuffer.
        - If `opts` is a string, it is specifying the encoding.
      - opts.timeout. Number. How long, in ms, to wait for a response? Default 5000.

      ```js
      archive.readFile('dat://.../picture.png').then(arrayBuf => {
        var blob = new Blob([arrayBuf], {type: 'image/png'})
        document.querySelector('img').src = URL.createObjectURL(blob)
      })
      
      archive.readFile('dat:/.../picture.png', 'base64').then(str => {
        document.querySelector('img').src = 'data:image/png;base64,'+str
      })
      ```

      If the archive is not found on the network, or in the local cache, this call will timeout.
  -
    name: "dat.readDirectory()"
    signature: "dat.readDirectory(url: string, opts?: Object): Promise&lt;Array&lt;String&gt;&gt;"
    experimental: true
    desc: |
      Reads the contents of a directory.
      Returns an object listing the files and folders in the directory, excluding '.' and '..'.

      - url. The URL of the directory to read. This must be a dat:// URL.
      - opts.version. String. Which version of the file to read? Refers to the name of a checkpoint. If unspecified, defaults to latest.
      - opts.timeout. Number. How long, in ms, to wait for a response? Default 5000.
  -
    name: "dat.writeFile()"
    signature: "dat.writeFile(url: string, data: string|ArrayBuffer, opts?: Object|String): Promise&lt;void&gt;"
    experimental: true
    desc: |
      Replaces the file's contents with 'data'.
      The promise will reject if there is already a directory at 'url', or if the containing directory-tree does not yet exist.

      - url. The URL of the file to write. This must be a dat:// URL.
      - data. The data to be written.
      - opts.encoding
        - 'utf8' / 'utf-8'. Data must be a string. (This is the default value if data is a string.)
        - 'base64'. Data must be a string.
        - 'hex'. Data must be a string.
        - 'binary'. Data must be an ArrayBuffer. (This is the default value if data is an ArrayBuffer.)
        - If `opts` is a string, it is specifying the encoding.

      The app must be the creator of the archive to be granted permission.

      ```js
      archive.writeFile('dat://.../hello.txt', 'world', 'utf8').then(...)
      ```
  -
    name: "dat.createDirectory()"
    signature: "dat.createDirectory(url: string): Promise&lt;void&gt;"
    experimental: true
    desc: |
      Creates a new directory at 'url'.
      The promise will reject if there is already a file or directory at 'url', or if the containing directory-tree does not yet exist.

      - url. The URL of the directory to create. This must be a dat:// URL.

      The app must be the creator of the archive to be granted permission.
  -
    name: "dat.deleteFile()"
    signature: "dat.deleteFile(url: string): Promise&lt;void&gt;"
    notyet: true
    desc: |
      Deletes the file at 'url'.
      The promise will reject if no file is found, or if the target path is a directory.
      
      - url. The URL of the file to delete. This must be a dat:// URL.

      Requires `datWrite` permission, and the app must be the creator of the archive.
  -
    name: "dat.deleteDirectory()"
    signature: "dat.deleteDirectory(url: string): Promise&lt;void&gt;"
    notyet: true
    desc: |
      Deletes the directory at 'url'.
      The promise will reject if there is not a directory at 'url', or if the directory is not empty.

      - url. The URL of the directory to delete. This must be a dat:// URL.

      Requires `datWrite` permission, and the app must be the creator of the archive.
  -
    name: "dat.getHistory()"
    signature: "dat.getHistory(url: string, opts?: Object): Promise&lt;Array&lt;Object&gt;&gt;"
    notyet: true
    desc: |
      Fetch the history of changes to this archive.

      - url. The URL of the archive to read. This must be a dat:// URL.
      - opts.offset. Optional number, where in the history to start reading.
      - opts.limit. Optional number, how many entries to include.
  -
    name: "dat.getCheckpoints()"
    signature: "dat.getCheckpoints(url: string, opts?: Object): Promise&lt;Array&lt;Object&gt;&gt;"
    notyet: true
    desc: |
      Fetch the checkpoints in this archives history.

      - url. The URL of the archive to read. This must be a dat:// URL.
      - opts.offset. Optional number, where in the history to start reading.
      - opts.limit. Optional number, how many entries to include.

      Return objects:

      ```text
      {
        index: number (position in history),
        name: string,
        timestamp: number (timestamp),
        description: string (optional)
      }
      ```
  -
    name: "dat.writeCheckpoint()"
    signature: "dat.writeCheckpoint(url: string, name: string, description?: string): Promise&lt;void&gt;"
    notyet: true
    desc: |
      Writes a version checkpoint to the archive's history.

      - url. The URL of the archive to update. This must be a dat:// URL.
      - name. The version-name of the checkpoint. Can be any string. If the name has been used before, checkpoint() will fail.
      - description. Optional, a message to accompany the checkpoint.

      Requires `datWrite` permission, and the app must be the creator of the archive.

      ```js
      // Write new versions
      archive.writeCheckpoint('dat://.../', '1.0.0')
        .then(() => archive.writeFile('dat://.../hello.txt', 'web!!', 'utf8'))
        .then(() => archive.writeCheckpoint('dat://.../', '2.0.0'))
      ```